{{java_gen_comment}}
package {{config.qname}}.content_providers;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import android.text.TextUtils;
import {{config.qname}}.impl.databases.DatabaseOpenHelperImpl;
{% if not entity.name in ref_entity_names %}
import {{config.qname}}.databases.{{entity.name}}Table;
{% endif %}
{% for name in ref_entity_names %}
import {{config.qname}}.databases.{{name}}Table;
{% endfor %}

public class {{entity.name}}ContentProvider extends ContentProvider {

	protected DatabaseOpenHelperImpl database;

	protected static final int MULTIPLE = 10;
	protected static final int SINGLE = 20;

	protected static final String AUTHORITY = "{{config.qname}}.{{entity.name|cameltounder}}_content_provider";
	protected static final String BASE_PATH = "{{entity.name|cameltounder}}";
	public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY
			+ "/" + BASE_PATH);

	protected static final UriMatcher sURIMatcher = new UriMatcher(
			UriMatcher.NO_MATCH);
	static {
		sURIMatcher.addURI(AUTHORITY, BASE_PATH, MULTIPLE);
		sURIMatcher.addURI(AUTHORITY, BASE_PATH + "/#", SINGLE);
	}

	@Override
	public boolean onCreate() {
		database = new DatabaseOpenHelperImpl(getContext());
		return false;
	}

	@Override
	public Cursor query(Uri uri, String[] projection, String selection,
			String[] selectionArgs, String sortOrder) {
		SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();

		queryBuilder.setTables({{entity.name}}Table.TABLE_NAME
		    {% for attr in entity.attributes %}
		    {% if attr.reference_type %}
		    + " LEFT OUTER JOIN "
		    + {{attr.reference_type.name}}Table.TABLE_NAME + " {{attr.name|cameltounder}} " + " ON "
		    + "{{attr.name|cameltounder}}" + "." + {{attr.reference_type.name}}Table.COLUMN_ID + " = "
		    + {{entity.name}}Table.TABLE_NAME + "." + {{entity.name}}Table.COLUMN_ID_{{attr.name|cameltounder|upper}}
		    {% endif %}
		    {% endfor %}
		    );
		int uriType = sURIMatcher.match(uri);
		switch (uriType) {
		case MULTIPLE:
			break;
		case SINGLE:
			queryBuilder.appendWhere({{entity.name}}Table.TABLE_NAME + "." + {{entity.name}}Table.COLUMN_ID + "="
					+ uri.getLastPathSegment());
			break;
		default:
			throw new IllegalArgumentException("Unknown URI: " + uri);
		}

		SQLiteDatabase db = database.getWritableDatabase();
		Cursor cursor = queryBuilder.query(db, projection, selection,
				selectionArgs, null, null, sortOrder);
		cursor.setNotificationUri(getContext().getContentResolver(), uri);

		return cursor;
	}

	@Override
	public String getType(Uri uri) {
		return null;
	}

	@Override
	public Uri insert(Uri uri, ContentValues values) {
		int uriType = sURIMatcher.match(uri);
		SQLiteDatabase db = database.getWritableDatabase();
		Long id = (long) 0;
		switch (uriType) {
		case MULTIPLE:
			id = db.insertOrThrow({{entity.name}}Table.TABLE_NAME, null, values);
			break;
		default:
			throw new IllegalArgumentException("Unknown URI: " + uri);
		}
		getContext().getContentResolver().notifyChange(uri, null);
		return Uri.parse(BASE_PATH + "/" + id);
	}

	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs) {
		int uriType = sURIMatcher.match(uri);
		SQLiteDatabase db = database.getWritableDatabase();
		int rowsDeleted = 0;
		switch (uriType) {
		case MULTIPLE:
			rowsDeleted = db.delete({{entity.name}}Table.TABLE_NAME, selection,
					selectionArgs);
			break;
		case SINGLE:
			String id = uri.getLastPathSegment();
			if (TextUtils.isEmpty(selection)) {
				rowsDeleted = db.delete({{entity.name}}Table.TABLE_NAME,
						{{entity.name}}Table.COLUMN_ID + "=" + id, null);
			} else {
				rowsDeleted = db.delete({{entity.name}}Table.TABLE_NAME,
						{{entity.name}}Table.COLUMN_ID + "=" + id + " and " + selection,
						selectionArgs);
			}
			break;
		default:
			throw new IllegalArgumentException("Unknown URI: " + uri);
		}
		getContext().getContentResolver().notifyChange(uri, null);
		return rowsDeleted;
	}

	@Override
	public int update(Uri uri, ContentValues values, String selection,
			String[] selectionArgs) {
		int uriType = sURIMatcher.match(uri);
		SQLiteDatabase sqlDB = database.getWritableDatabase();
		int rowsUpdated = 0;
		switch (uriType) {
		case MULTIPLE:
			rowsUpdated = sqlDB.update({{entity.name}}Table.TABLE_NAME,
					values, selection, selectionArgs);
			break;
		case SINGLE:
			String id = uri.getLastPathSegment();
			if (TextUtils.isEmpty(selection)) {
				rowsUpdated = sqlDB.update(
						{{entity.name}}Table.TABLE_NAME, values,
						{{entity.name}}Table.COLUMN_ID + "=" + id, null);
			} else {
				rowsUpdated = sqlDB.update(
						{{entity.name}}Table.TABLE_NAME, values,
						{{entity.name}}Table.COLUMN_ID + "=" + id
								+ " and " + selection, selectionArgs);
			}
			break;
		default:
			throw new IllegalArgumentException("Unknown URI: " + uri);
		}
		getContext().getContentResolver().notifyChange(uri, null);
		return rowsUpdated;
	}

}
