{{java_gen_comment}}
package {{config.qname}}.fragments;

import android.os.Bundle;
import applang.android.framework.fragments.AbstractListFragment;
import applang.android.framework.fragments.ListSubFragment;
import {{config.qname}}.R;
import {{config.qname}}.adapters.{{entity.name}}Adapter;
{% if not entity.name in ref_entity_names %}
import {{config.qname}}.databases.{{entity.name}}Table;
{% endif %}
{% for name in ref_entity_names %}
import {{config.qname}}.databases.{{name}}Table;
{% endfor %}
import {{config.qname}}.content_providers.{{entity.name}}ContentProvider;
import {{config.qname}}.impl.fragments.{{entity.name}}DetailsFragmentImpl;
import {{config.qname}}.impl.fragments.{{entity.name}}EditFragmentImpl;
import {{config.qname}}.impl.fragments.{{entity.name}}NewFragmentImpl;
import {{config.qname}}.impl.fragments.{{entity.name}}ListFragmentImpl;

public class {{entity.name}}ListFragment extends AbstractListFragment {

	public static {{entity.name}}ListFragment newInstance() {
		{{entity.name}}ListFragment fragment = new {{entity.name}}ListFragmentImpl();
		Bundle args = new Bundle();
		args.putInt(ARG_KEY_ENTITY_NAME_RES_ID, R.string.ent_{{entity.name|cameltounder}});
		args.putString(ARG_KEY_NEW_FRAG_CLASS_NAME,
				{{entity.name}}NewFragmentImpl.class.getName());
		args.putBoolean(ARG_KEY_ACTION_NEW_ENABLED, {{'true' if entity.operations.create else 'false'}});
		fragment.setArguments(args);
		return fragment;
	}
	
	public static {{entity.name}}ListFragment newInstance(String filterColumnName, Long filterValue, String subtitle) {
		{{entity.name}}ListFragment fragment = newInstance();
		Bundle args = fragment.getArguments();
		args.putString(ARG_KEY_FILTER_COLUMN_NAME, filterColumnName);
		args.putLong(ARG_KEY_FILTER_VALUE, filterValue);
		args.putString(ARG_KEY_SUBTITLE, subtitle);
		fragment.setArguments(args);
		return fragment;
	}
	
	@Override
	protected ListSubFragment createListSubFragment() {
		String[] projection = {
				{{entity.name}}Table.TABLE_NAME + "." + {{entity.name}}Table.COLUMN_ID,
				{% for attr in entity.attributes if not attr.exclude_from_list %}
				{% if attr.primitive_type %}
				{{entity.name}}Table.TABLE_NAME + "." + {{entity.name}}Table.COLUMN_{{attr.name|cameltounder|upper}}
				{% else %}
				"{{attr.name|cameltounder}}" + "." + {{attr.reference_type.name}}Table.COLUMN_{{attr.reference_type.to_string.name|cameltounder|upper if attr.reference_type.to_string else 'ID'}} + " as " + "{{attr.name|cameltounder}}_" + {{attr.reference_type.name}}Table.COLUMN_{{attr.reference_type.to_string.name|cameltounder|upper if attr.reference_type.to_string else 'ID'}}
				{% endif %}
				{% if not loop.last %}
				,
				{% endif %}
				{% endfor %}
				};
		return ListSubFragment.newInstance(R.string.ent_{{entity.name|cameltounder}}, projection,
				{{entity.name}}ContentProvider.CONTENT_URI.toString(),
				{{entity.name}}Adapter.class.getName(),
				{{entity.name}}EditFragmentImpl.class.getName(),
				{{entity.name}}DetailsFragmentImpl.class.getName(),
				{{'true' if entity.operations.edit else 'false'}},
				{{'true' if entity.operations.delete else 'false'}});
	}

	@Override
	protected String getSelectionForSearchQuery() {
	    String selection = "";
	    {% for attr in entity.attributes if attr.searchable %}
	    {% if attr.primitive_type %}
	    selection += {{entity.name}}Table.TABLE_NAME + "." + {{entity.name}}Table.COLUMN_{{attr.name|cameltounder|upper}} + " LIKE ?1";
	    {% else %}
	    selection += "{{attr.name|cameltounder}}" + "." + {{attr.reference_type.name}}Table.COLUMN_{{attr.reference_type.to_string.name|cameltounder|upper if attr.reference_type.to_string}} + " LIKE ?1";
	    {% endif %}
	    {% if not loop.last %}
	    selection += " OR ";
	    {% endif %}
	    {% endfor %}
	    return selection;
	}
}
